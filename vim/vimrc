" vim:set ts=2 sw=2 :
" neobundleの設定
set nocompatible               " be iMproved
filetype off                   " required!
filetype plugin indent off     " required!
if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
  call neobundle#rc(expand('~/.vim/bundle/'))
endif
NeoBundle 'Shougo/neobundle.vim'
NeoBundle 'Shougo/vimproc'
NeoBundle 'Shougo/vimshell'
NeoBundle 'Shougo/unite.vim'
"" Unite Source
NeoBundle 'tsukkee/unite-help'
NeoBundle 'kmnk/vim-unite-giti'
NeoBundle 'h1mesuke/unite-outline'
NeoBundle 'basyura/wwwrefe.vim'
NeoBundle 'ujihisa/unite-colorscheme'
NeoBundle 'mattn/unite-advent_calendar'
"" ネタのUnite Source
NeoBundle 'mattn/unite-nyancat'
NeoBundle 'osyo-manga/unite-shimapan'
"" Bundles
NeoBundle 'Shougo/neocomplcache'
NeoBundle 'Shougo/neocomplcache-snippets-complete'
NeoBundle 'Shougo/vimfiler'
NeoBundle 'Shougo/vinarise'
NeoBundle 'thinca/vim-ref'
NeoBundle 'mattn/hahhah-vim'            " ステータスラインにハァハァ
NeoBundle 'tpope/vim-abolish'           " キャメルケース,スネークケース等の変換
NeoBundle 'kana/vim-textobj-user'       " textobjを作るための物
NeoBundle 'kana/vim-textobj-fold'       " 折りたたまれた部分をtextobjに
NeoBundle 'kana/vim-textobj-indent'     " インデントされた部分をtextobjに
NeoBundle 'h1mesuke/textobj-wiw'        " wordの中の単語をtextobjに
NeoBundle 'tomtom/tcomment_vim'         " コメントのトグル
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'errormarker.vim'
NeoBundle 'Gist.vim'
NeoBundle 'Align'                       " テキストを表みたいな感じに整形
NeoBundle 'taku-o/vim-toggle'           " true,falseのトグル
NeoBundle 'dannyob/quickfixstatus'      " カーソル行のquickfixをコマンド行に表示
NeoBundle 'mattn/webapi-vim'
NeoBundle 'tyru/open-browser.vim'
NeoBundle 'sudo.vim'
NeoBundle 'tpope/vim-fugitive'          " git操作
NeoBundle 'gregsexton/gitv'             " gitk みたいなもの fugitiveが必要
NeoBundle 'kana/vim-tabpagecd'          " タブごとにカレントディレクトリ設定
NeoBundle 'koron/nyancat-vim'           " nyancatのアニメ
NeoBundle 'nefo-mi/nyan-modoki.vim'     " ステータスラインに顔文字
"" Colorscheme
NeoBundle 'molokai'
NeoBundle 'pyte'
NeoBundle 'Zenburn'
NeoBundle 'altercation/vim-colors-solarized.git'
"" C++
NeoBundle 'Rip-Rip/clang_complete'
NeoBundle 'osyo-manga/neocomplcache-clang_complete'
"" Ruby
"" Dart snippets
NeoBundle "git://github.com/osyo-manga/neocomplcache-snippets-complete-dart.git"
"" Dart syntax
NeoBundle "git://github.com/vim-scripts/Dart.git"
filetype plugin indent on     " required!
" neobundleの設定ここまで
" unite-neco {{{
let s:unite_source = {'name': 'neco'}
function! s:unite_source.gather_candidates(args, context)
  let necos = [
        \ "~(-'_'-) goes right",
        \ "~(-'_'-) goes right and left",
        \ "~(-'_'-) goes right quickly",
        \ "~(-'_'-) goes right then smile",
        \ "~(-'_'-)  -8(*'_'*) go right and left",
        \ "(=' .' ) ~w",
        \ ]
  return map(necos, '{
        \ "word": v:val,
        \ "source": "neco",
        \ "kind": "command",
        \ "action__command": "Neco " . v:key,
        \ }')
endfunction
call unite#define_source(s:unite_source)


let g:quickrun_config = {}

" ファイルエンコードの設定
set enc=utf-8
set fenc=utf-8
set fencs=utf-8,iso-2022-jp,euc-jp,sjis,jis
set fileformats=unix,dos,mac

set number          " 行番号表示
set showtabline=2   " タブページ常に表示
set noswapfile      " スワップファイル作らない
set nobackup        " バックアップファイル作らない
set nowrapscan      " ファイルの終わりを超えて検索しない
set showmatch       " 対応する括弧の表示
" デフォルトインデント
set autoindent smartindent
set shiftwidth=4
set expandtab
set tabstop=4
set backspace=indent,eol,start  " Backspaceで色々削除可能
" 不可視文字表示
set list
set listchars=tab:>-,trail:-
set whichwrap=b,s,h,l           " カーソルが行頭，行末で止まらない
" 全角文字をちゃんとあつかう
if has('gui_running')
  set ambiwidth=double
endif
" ファイルタイプ別設定
filetype on
filetype indent on
filetype plugin on
syntax on                       " syntaxカラー有効
set background=dark
if has('gui_running')
  colorscheme solarized
else
  colorscheme desert
endif
set nrformats=alpha,octal,hex     " Ctrl+A, Ctrl+Xの加算減算で認識する基数
set wildmode=list,full            " exコマンド時，Tabで補完候補一覧
set undolevels=10000              " Undoの回数制限
" ステータスラインの設定
set statusline=%<%F\ %m%r%h%w%y%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}[POS=%l,%v,%p%%]
set statusline+=%{g:NyanModoki()}
set statusline+=%=%{g:HahHah()}
set laststatus=2
let g:nyan_modoki_select_cat_face_number = 4
set showcmd               " 入力中のコマンド表示
setlocal bufhidden=delete " バッファ閉じた時に削除
set clipboard=unnamed,autoselect "無名レジスタを*レジスタにも入るように
nnoremap <ESC><ESC> :nohlsearch<CR> "<ESC><ESC>でハイライトオフ
" ,ssでカレントディレクトリをターミナルで開く
function! s:OpenMlterm()
  silent execute '!mlterm &'
endfunction
nnoremap <silent> ,ss :<C-u>call <SID>OpenMlterm()<CR>


" Uniteの設定
let g:unite_enable_start_insert=1 "入力モードで開始する
let g:unite_source_file_mru_limit=500 " 最近使ったファイルの最大値
let g:unite_source_history_yank_enable=1 " history/yankの有効化
"" ESC2回押すと終了する
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>q<CR>
"" バッファ一覧
noremap <silent> ,ub :Unite buffer<CR>
"" ファイル一覧
noremap <silent> ,uf :UniteWithBufferDir -buffer-name=file file<CR>
"" 最近使ったファイルの一覧
noremap <silent> ,ur :Unite -buffer-name=register register<CR>
"" 最近使ったファイルの一覧
noremap <silent> ,um :Unite file_mru<CR>
"" 常用
noremap <silent> ,uu :Unite buffer file_mru<CR>
"" 全部
noremap <silent> ,ua :UniteWithBufferDir -buffer-name=files buffer file_mru<CR>
"" Colorscheme
noremap <silent> ,ucs :<C-u>Unite -no-quit -auto-preview colorscheme<CR>
"" history/yank
noremap <silent> ,uhy :<C-u>Unite history/yank<CR>


" neocomplcacheの設定
let g:neocomplcache_enable_at_startup=1
imap <C-k> <Plug>(neocomplcache_snippets_expand)
smap <C-k> <Plug>(neocomplcache_snippets_expand)
inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()
"" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
"" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.c = '\%(\.\|->\)\h\w*'
let g:neocomplcache_omni_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'


" Gtagsの設定
map <C-g> :Gtags 
map <C-i> :Gtags -f %<CR>
map <C-j> :GtagsCursor<CR>
map <C-n> :cn<CR>
map <C-p> :cp<CR>


" vimfiler
let g:vimfiler_as_default_explorer=1

"vimshell
nnoremap <silent> ,vs :VimShellTab<CR>


" Align(テキスト整形)
let g:Align_xstrlen = 3     " for japanese string
let g:DrChipTopLvlMenu = '' " remove 'DrChip' menu


"errormarker.vimの設定
let errormarker_errortext = "!!"
let errormarker_warningtext = "??"
let errormarker_errorgroup = "ErrorMsg"
let errormarker_warninggroup = "Todo"


" TXT
augroup txt-textwidth
  autocmd BufRead *.txt set fo+=mM
  autocmd BufRead *.txt set textwidth=80
augroup END


" C++
"" clang_complete
let g:clang_complete_auto=1
let g:clang_use_library=0
let g:clang_exec='/usr/bin/clang'
set completeopt=menuone " こうしないと候補選択時に Scratch ウィンドウが開く


" Ruby
augroup ruby-setting
  autocmd!
  autocmd FileType ruby call MyRubySetting()" .dartのファイルを開いた時にファイルタイプ設定
augroup END
function! MyRubySetting()
  set shiftwidth=2
  set tabstop=2
endfunction



" Dart
autocmd BufNewFile,BufRead *.dart setfiletype dart " .dartのファイルを開いた時にファイルタイプ設定
let s:dart_cmd = "$DART_SDK/bin/dart" " dartのパス
let g:quickrun_config['dart'] = {'command' : s:dart_cmd} " quickrunにdartのパスを設定


" TeX
augroup tex-mapping
  autocmd!
  autocmd FileType tex call MyTeXMapping()
augroup END
function! MyTeXMapping()
  nnoremap <buffer><C-o> :Unite -no-quite -no-start-insert -winheight=10 outline<CR>
endfunction
